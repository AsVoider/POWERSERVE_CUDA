stages:
  - check_format
  - setup
  - build
  - deploy
  - test

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $DAILY_TEST == "true"
    ## git push 时不执行
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  IMAGE_NAME: ubuntu:22.04
  CONTAINER_NAME: ndk
  HF_TOKEN: "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"
  HOME: /tmp
  BUILD_ROOT: "/home/gitlab-runner/Downloads"
  QNN_SDK_ROOT: "/opt/qcom/aistack/qairt/2.26.0.240828"
  DEVICE_ROOT: "/data/data/com.termux/files/home/CI"
  DEVICE_BIN: "${DEVICE_ROOT}/bin"
  DEVICE_HOST: "192.168.60.173"
  DEVICE_USER: "u0_a342"
  DEVICE_PORT: 8022
  CHECK_FORMAT: "true"
  # CI_DEBUG_TRACE: true
  # 如果branch名称里含ci，就把CI_DEBUG_TRACE设置为true

check_formatting:
  stage: check_format
  rules:
    - if: $CHECK_FORMAT == "true"
      when: always
  script:
    - export CLANG_FORMAT=${BUILD_ROOT}/clang-format-18
    - $CLANG_FORMAT --version
    - cd "$CI_PROJECT_DIR"
    - echo "Checking formatting from ${CI_MERGE_REQUEST_DIFF_BASE_SHA}..."
    - pwd
    - sleep 1
    - changed_files=$(git diff ${CI_MERGE_REQUEST_DIFF_BASE_SHA} --name-only)
    - echo "$changed_files"
    - if [[ -z "$changed_files" ]]; then echo "No files changed; nothing to format"; exit 0; fi
    - format_diff=$(python tools/format.py $changed_files)
    - format_exit_status=$?
    - echo "$format_exit_status"
    - if [[ "$format_exit_status" -eq "0" ]]; then echo "Formatting is correct"; exit 0; else echo "Detected formatting issues; please fix"; exit 1; fi

setup:
  stage: setup
  script:
    - pwd
    - sudo podman stop $CONTAINER_NAME || true
    - sudo podman rm $CONTAINER_NAME || true
    - git submodule update --init --recursive
    - sudo -E podman run -v $(realpath .):/code -v $(realpath ${BUILD_ROOT}):/data -v $(realpath ${QNN_SDK_ROOT}):/qnn -dit --name ndk ubuntu:22.04
    - sudo podman exec -it $CONTAINER_NAME bash -c "echo -e 'deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse' | tee /etc/apt/sources.list"
    - sudo podman exec -it $CONTAINER_NAME bash -c "apt update && apt upgrade -y && apt install -y sudo vim cmake unzip git python-is-python3 python3-pip build-essential"
    - sudo podman exec -it $CONTAINER_NAME bash -c "git config --global --add safe.directory /code"
    - sudo podman exec -it $CONTAINER_NAME bash -c "pip install pandas requests"

build:
  stage: build
  script:
    - sleep 3
    - sudo podman exec -it $CONTAINER_NAME bash -c "export QNN_SDK_ROOT=/qnn"
    - sudo podman exec -it $CONTAINER_NAME bash -c "echo 'export QNN_SDK_ROOT=/qnn' >> ~/.bashrc"
    - sudo podman exec -it $CONTAINER_NAME bash -c "echo 'export NDK=/data/android-ndk-r27b' >> ~/.bashrc"
    - sudo podman exec -it $CONTAINER_NAME bash -c "source ~/.bashrc"
    - sleep 1
    - sudo podman exec -it $CONTAINER_NAME bash -c -i "cd /code && cmake -DCMAKE_TOOLCHAIN_FILE=/data/android-ndk-r27b/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-34 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=OFF -DGGML_OPENMP=OFF -DSMART_ENABLE_ASAN=OFF -DSMART_WITH_QNN=ON -S . -B build_android"
    - sudo podman exec -it $CONTAINER_NAME bash -c -i "cd /code && cmake --build build_android --config RelWithDebInfo --parallel 12 && sudo chmod -R 777 build_android"
    - sudo podman exec -it $CONTAINER_NAME bash -c -i "cp -r /code/build_android /data"

deploy:
  stage: deploy
  script:
    - sleep 2
    - echo "Deploying binaries and models to your Android device. You must add gitlab-runner's and root's ssh public key to device's ~/.ssh/authorized_keys."
    - ./.gitlab/ecmd.sh scp -o StrictHostKeyChecking=no -P ${DEVICE_PORT} ${BUILD_ROOT}/build_android/bin/run ${DEVICE_USER}@${DEVICE_HOST}:${DEVICE_BIN}
    - ./.gitlab/ecmd.sh scp -o StrictHostKeyChecking=no -P ${DEVICE_PORT} ${BUILD_ROOT}/build_android/tools/gguf_config_to_json/config_generator ${DEVICE_USER}@${DEVICE_HOST}:${DEVICE_BIN}
    - ./.gitlab/ecmd.sh scp -o StrictHostKeyChecking=no -P ${DEVICE_PORT} ${BUILD_ROOT}/build_android/bin/server ${DEVICE_USER}@${DEVICE_HOST}:${DEVICE_BIN}
    - ./.gitlab/ecmd.sh scp -o StrictHostKeyChecking=no -P ${DEVICE_PORT} ${BUILD_ROOT}/build_android/tools/perpelxity/perpelxity_test ${DEVICE_USER}@${DEVICE_HOST}:${DEVICE_BIN}
    - ./.gitlab/ecmd.sh ssh -o StrictHostKeyChecking=no -p "${DEVICE_PORT}" "${DEVICE_USER}@${DEVICE_HOST}" "ls -ahl ${DEVICE_BIN}"

# =============== Required Tests ===============
test_llama3.1:
  stage: test
  script:
    - sleep 2 # just relax
    - .gitlab/test-llama3.1.sh ${DEVICE_ROOT} ${DEVICE_USER}@${DEVICE_HOST} ${DEVICE_PORT} 4 32

test_thread:
  stage: test
  script:
    - .gitlab/test-llama3.1.sh ${DEVICE_ROOT} ${DEVICE_USER}@${DEVICE_HOST} ${DEVICE_PORT} 8 32
  needs:
    - test_llama3.1

test_qnn:
  stage: test
  allow_failure: true
  rules:
    - if: $CI_TEST_QNN == "true"
      when: always
    - when: manual
  script:
    - sleep 10
    - .gitlab/test-qwen2.sh ${DEVICE_ROOT} ${DEVICE_USER}@${DEVICE_HOST} ${DEVICE_PORT} 8 300 1
  needs:
    - test_thread

test_ppl:
  stage: test
  when: manual
  allow_failure: true
  rules:
    - if: $CI_TEST_PPL == "true"
      when: always
    - when: manual
  script:
    - sleep 10
    - .gitlab/test-ppl.sh ${DEVICE_ROOT} ${DEVICE_USER}@${DEVICE_HOST} ${DEVICE_PORT}
  needs:
    - test_qnn

# =============== Daily Tests ===============
test_long_out:
  stage: test
  allow_failure: true
  rules:
    - if: $CI_TEST_LONG_OUT == "true"
      when: always
    - when: manual
  script:
    - sleep 30
    - .gitlab/test-qwen2.sh ${DEVICE_ROOT} ${DEVICE_USER}@${DEVICE_HOST} ${DEVICE_PORT} 8 4096 1
  needs:
    - test_ppl

test_mmlu:
  stage: test
  allow_failure: true
  rules:
    - if: $CI_TEST_MMLU == "true"
      when: always
    - when: manual
  script:
    - sleep 60
    - .gitlab/test-mmlu.sh ${DEVICE_ROOT} ${DEVICE_USER} ${DEVICE_HOST} ${DEVICE_PORT} ${CONTAINER_NAME}
  needs:
    - test_long_out
